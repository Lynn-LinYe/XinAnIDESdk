const expression=require("./lib/expression"),text=require("./lib/text"),{DEVICE_LEVEL:DEVICE_LEVEL}=require("../lite/lite-enum"),card=process.env.DEVICE_LEVEL===DEVICE_LEVEL.CARD,REG_CARD=/\$(tc|r|t)\((.+?)\)/;function transExp(t,e){let r=t.toString().trim();return isExp(r)&&(r=parseExp(r,e)),r}function parseExp(value,functionFlag){const textArray=text.parseText(value),explist=[];for(let t=0;t<textArray.length;t++){const e=textArray[t];let r;e.tag?(r=card?REG_CARD.test(e.value)?e.value:`{{${e.value}}}`:expression.parseExpression(e.value),1===textArray.length||card||(r=`(${r})`)):r=card?e.value:`'${e.value}'`,explist.push(r)}let func=explist.join(card?"":" + ");return!1===functionFlag||card||(func=eval("(function () {return "+func+"})")),func=card&&textArray.length>1?"$f("+func+")":func,func}function transExpForList(t){let e=t.toString().trim();return containExp(e)&&(e=parseExpList(e)),e}function parseExpList(t){const e=t.match(/{{{(.+?)}}}|{{(.+?)}}/g);let r=0;const n=[];return t.replace(/{{{(.+?)}}}|{{(.+?)}}/g,"&e").split(/\s+/).forEach(t=>{if(t.indexOf("&e")>=0){for(;t.indexOf("&e")>=0;)t=t.replace("&e",e[r++]);const s=text.parseText(t),a=[];s&&(s.forEach(function(t){const e=t.tag?card?`{{${t.value}}}`:expression.parseExpression(t.value):card?t.value:`'${t.value}'`;a.push(e)}),n.push(a.join("+")))}else{const e=card?t:`'${t}'`;n.push(e)}}),card?n:"(function () {return ["+n.join(", ")+"]})"}function isExp(t){return/{{{(.+?)}}}|{{(.+?)}}/.test(t)}function containExp(t){return/{{{(.+?)}}}|{{(.+?)}}/g.test(t)}function removeAllExpFix(t){return containExp(t)?t.replace(/\{\{\{?|\}\}\}?/g,""):t}transExp.isExp=isExp,transExp.containExp=containExp,transExp.removeAllExpFix=removeAllExpFix,transExp.transExpForList=transExpForList,module.exports=transExp;