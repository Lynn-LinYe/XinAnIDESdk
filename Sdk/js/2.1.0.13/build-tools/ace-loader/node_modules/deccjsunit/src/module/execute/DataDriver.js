/*
 * Copyright (c) 2020 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const SUITES_KEY = 'suites'
const SPECS_KEY = 'items'
const DESCRIBE_KEY = 'describe'
const IT_KEY = 'it'
const PARAMS_KEY = 'params'

const reTrim = /^\s+|\s+$/g

let trim = (value) => {
  return value == null ? '' : new String(value).replace(reTrim)
}

// 仅用于解析DataDriver加载的json对象。
class ObjectUitls {
  static get (object, name, defaultValue) {
    let result = defaultValue
    for (const key in object) {
      if (key === name) {
        return object[key]
      }
    }
    return result
  }

  static has (object, key) {
    return object.hasOwnProperty(key)
  }
}

class DataDriver {
  constructor (attr) {
    this.id = 'dataDriver'
    this.data = attr.data || {}
  }

  init (coreContext) {
    this.coreContext = coreContext
    this.suiteService = this.coreContext.getDefaultService('suite')
    this.specService = this.coreContext.getDefaultService('spec')
  }

  getSpecParams () {
    let specParams = []
    let suiteDesc = this.suiteService.getCurrentRunningSuite().description
    let specDesc = this.specService.getCurrentRunningSpec().description

    let suites = ObjectUitls.get(this.data, SUITES_KEY, [])
    for (const suiteItem of suites) {
      if (ObjectUitls.has(suiteItem, DESCRIBE_KEY) && trim(ObjectUitls.get(suiteItem, DESCRIBE_KEY)) === trim(suiteDesc)) {
        // 得到所有的测试用例配置
        let specs = ObjectUitls.get(suiteItem, SPECS_KEY, [])
        for (const specItem of specs) {
          if (ObjectUitls.has(specItem, IT_KEY) && trim(ObjectUitls.get(specItem, IT_KEY)) === trim(specDesc)) {
            return ObjectUitls.get(specItem, PARAMS_KEY, specParams)
          }
        }
      }
    }
    return specParams
  }

  // getSuiteParams () {
  //     let suiteDesc = this.suiteService.getCurrentRunningSuite().description
  //     let suitsParams = []
  //     let suites = _.get(this.data,SUITES_KEY,[])
  //     for (const suiteItem of suites) {
  //         if(_.has(suiteItem,DESCRIBE_KEY) && _.trim(_.get(suiteItem,DESCRIBE_KEY)) === _.trim(suiteDesc)){
  //             return _.get(suiteItem,PARAMS_KEY,suitsParams)
  //         }
  //     }

  //     return suitsParams
  // }

  // apis () {
  //     const _this = this
  //     return {
  //         getSpecParams: function () {
  //             return _this.getSpecParams()
  //       }
  //     }
  //   }
}

export default DataDriver
